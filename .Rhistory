mutate(struktur_id = as.integer(struktur_id))
spurenpapiere_systematisch <- spurenpapiere_systematisch %>%
pivot_longer(-1,names_to = c("Periode","tierart"),names_sep = "_",values_to = "Detektion") %>%
mutate(Detektion = !is.na(Detektion)) %>%
rename(kontrollperiode = Periode) %>%
left_join(perioden, by = c("kontrollperiode" = "periode_int")) %>%
mutate(phase = sheet_i)
}) %>%
mutate(
phase = factor(phase,levels = sheets,labels = c("Herbst '19","Frühling '20")),
zielart = str_detect(tierart,"Iltis|Hermelin|Mauswiesel")
)
spurenpapiere_systematisch
spurenpapiere_systematisch %>%
filter(tierart %in% c("Hermelin","Iltis","Mauswiesel"),
Detektion) %>%
waffle_iron(aes_d(group = tierart),rows = 4) %>%
mutate(group = fct_expand(group,"Mauswiesel")) %>%
ggplot(aes(x,y, fill = group)) +
geom_tile(colour = "white",lwd = 1.2) +
scale_fill_manual(name = "Art",drop = FALSE,values = tierart_farben) +
coord_equal() +
theme_void() +
theme(legend.position = "bottom")
require(cowplot)
janein_cols
p1 <- spurenpapiere_systematisch %>%
filter(zielart) %>%
mutate(phase = fct_rev(phase)) %>%
group_by(struktur_id,phase) %>%
summarise(zielart = any(Detektion)) %>%
group_by(phase,zielart) %>%
count() %>%
group_by(phase) %>%
mutate(
zielart = ifelse(zielart,"ja","nein")
) %>%
arrange(phase,zielart) %>%
mutate(
zielart = fct_rev(zielart),
pos = (lag(n,default = 0)+n)/2,
perc = n/sum(n)
) %>%
ggplot(aes(n,phase, fill = zielart)) +
geom_col() +
geom_text(aes(x = pos, label = paste0(n, " (",round(perc*100,0),"%)")),position = "stack") +
scale_fill_discrete(type = janein_cols) +
labs(fill = "Zielart detektiert", x = "", y = "") +
theme_light() +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p2 <- spurenpapiere_systematisch %>%
filter(zielart) %>%
mutate(phase = fct_rev(phase)) %>%
group_by(struktur_id) %>%
summarise(zielart = any(Detektion)) %>%
group_by(zielart) %>%
count() %>%
ungroup() %>%
mutate(
zielart = ifelse(zielart,"ja","nein")
) %>%
arrange(zielart) %>%
mutate(
zielart = fct_rev(zielart),
pos = (lag(n,default = 0)+n)/2,
perc = n/sum(n)
)%>%
ggplot(aes(n,"Beide Jahre", fill = zielart)) +
geom_col() +
geom_text(aes(x = pos, label = paste0(n, " (",round(perc*100,0),"%)")),position = "stack") +
scale_fill_discrete(type = janein_cols) +
labs(fill = "Zielart detektiert", x = "Anzahl Strukturen", y = "") +
guides(fill = guide_legend(reverse = TRUE)) +
theme_light() +
theme(legend.position = "bottom")
p3 <- cowplot::plot_grid(p1, p2, ncol = 1,rel_heights = c(4,4.6),align = "v")
p3
labs(y = "Anzah
)
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr") +
theme_light()
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr") +
theme_light()
beobachtungsmeldungen
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)})
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr")
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr") +
theme_light()
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr") +
theme_light()
nachweiserfolg_ref <- read_delim("input/nachweiserfolge_zusammenstellung.csv", ";") %>%
mutate(
Studie = paste(Bezeichnung,Jahr),
nachweiserfolg = tunnel_mit_nachweisen / tunnel_total,
erfolgskontrolle_name = ifelse(erfolgskontrolle,"Erfolgskontrollen","andere Untersuchungen"),
)
vorliegende_studie <- c("Horgen 2019", "Horgen 2020", "Horgen 2014 - 2019")
nachweiserfolg_smry <- nachweiserfolg_ref %>%
group_by(erfolgskontrolle_name) %>%
summarise(
tunnel = median(tunnel_total),
nachweiserfolg_median = median(nachweiserfolg),
nachweiserfolg_q75 = quantile(nachweiserfolg, 0.75),
nachweiserfolg_q25 = quantile(nachweiserfolg, 0.25),
) %>%
mutate(
Studie = "Verteilung"
)
nachweiserfolg_ref2 <- bind_rows(nachweiserfolg_ref, nachweiserfolg_smry) %>%
mutate(
Studie = fct_reorder(Studie,nachweiserfolg),
erfolgskontrolle_name = fct_rev(erfolgskontrolle_name),
Studie = fct_relevel(Studie,"Verteilung",after = 0)
)
nachweiserfolg_ref2%>%
ggplot(aes(nachweiserfolg,Studie, size = tunnel_total)) +
geom_point() +
geom_point(data = ~filter(.,Studie %in% vorliegende_studie),colour = "red") +
geom_point(data = ~filter(.,!Studie %in% vorliegende_studie)) +
geom_pointrange(aes(x = nachweiserfolg_median, xmin = nachweiserfolg_q25, xmax = nachweiserfolg_q75, y = Studie),inherit.aes = FALSE) +
labs(size = "Anzahl Spurentunnel", y = "", x = "Nachweiserfolg") +
scale_x_continuous(labels = scales::percent_format(),limits = c(0,1)) +
# scale_size(limits = c(20,100)) +
# lims(x = c(0,100)) +
theme_light() +
theme(legend.position = "bottom") +
facet_grid(erfolgskontrolle_name~., scales = "free_y",space = "free")
nachweise_spontan2 %>%
select(-Jahr,-Struktur) %>%
kbl(
col.names = c("KW","Tierart"),
caption = "Tabellarische Darstellung aller Nachweise aus Datensatz A"
) %>%
kableExtra::group_rows(index = group_row_indices(nachweise_spontan2$Jahr,prefix = "Jahr: ")) %>%
kableExtra::group_rows(index = group_row_indices(nachweise_spontan2$Struktur,prefix = "Struktur: "), bold = FALSE,italic = TRUE, hline_after = FALSE)
run_full = FALSE
get_remote = FALSE
if(!run_full){
if(get_remote){
warning("if run_full is set to FALSE, get remote set to FALSE automaically")
get_remote <- FALSE
}
}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
require(kableExtra)
require(dplyr)
require(readr)
require(tidyr)
require(stringr)
require(ggplot2)
require(forcats)
require(lubridate)
require(glue)
group_row_indices <- function(col, prefix = "", suffix = "", sep = ""){
setNames(rle(col)[[1]],paste(prefix,rle(col)[[2]],suffix,sep = sep))
}
youtube <- function(id, text = ""){
require(knitr)
require(glue)
# Careful, you must set the css accordingly (.container and .video)
# https://www.h3xed.com/web-development/how-to-make-a-responsive-100-width-youtube-iframe-embed
# .container {
#     position: relative;
#     width: 100%;
#     height: 0;
#     padding-bottom: 56.25%;
#  }
# .video {
#     position: absolute;
#     top: 0;
#     left: 0;
#     width: 100%;
#     height: 100%;
# }
if(knitr::is_html_output()){
glue::glue('<div class="container"> <iframe src="//www.youtube.com/embed/{id}" frameborder="0" allowfullscreen class="video"></iframe> </div><caption class = "caption">{text}</caption>')
}
}
nachweise_spontan2 %>%
select(-Jahr,-Struktur) %>%
kbl(
col.names = c("KW","Tierart"),
caption = "Tabellarische Darstellung aller Nachweise aus Datensatz A"
) %>%
kableExtra::group_rows(index = group_row_indices(nachweise_spontan2$Jahr,prefix = "Jahr: ")) %>%
kableExtra::group_rows(index = group_row_indices(nachweise_spontan2$Struktur,prefix = "Struktur: "), bold = FALSE,italic = TRUE, hline_after = FALSE)
nachweise_spontan2 <- nachweise_spontan %>%
select(Jahr,KW,Struktur,Mäuse:Ratte) %>%
pivot_longer(Mäuse:Ratte) %>%
filter(!is.na(value)) %>%
select(-value) %>%
arrange(Jahr,Struktur,KW)
nachweiserfolge_zusammenstellung %>%
select(c(1:4,6)) %>%
kbl(position = "H",
col.names = c("Region","Jahr","n$_{+}$","n$_{Σ}$","Quelle"),
caption = "Zusammenstellung der Resultate verschiedener Spurentunnel-Untersuchungen. n$_{+}$ entspricht der Anzahl Spurentunnel mit Positivnachweisen, n$_{Σ}$ der Anzahl Spurentunnel der entsprechenden Untersuchung."
) %>%
kableExtra::group_rows(index = group_row_indices(nachweiserfolge_zusammenstellung$Typ))
run_full = FALSE
get_remote = FALSE
if(!run_full){
if(get_remote){
warning("if run_full is set to FALSE, get remote set to FALSE automaically")
get_remote <- FALSE
}
}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
require(kableExtra)
require(dplyr)
require(readr)
require(tidyr)
require(stringr)
require(ggplot2)
require(forcats)
require(lubridate)
require(glue)
group_row_indices <- function(col, prefix = "", suffix = "", sep = ""){
setNames(rle(col)[[1]],paste(prefix,rle(col)[[2]],suffix,sep = sep))
}
youtube <- function(id, text = ""){
require(knitr)
require(glue)
# Careful, you must set the css accordingly (.container and .video)
# https://www.h3xed.com/web-development/how-to-make-a-responsive-100-width-youtube-iframe-embed
# .container {
#     position: relative;
#     width: 100%;
#     height: 0;
#     padding-bottom: 56.25%;
#  }
# .video {
#     position: absolute;
#     top: 0;
#     left: 0;
#     width: 100%;
#     height: 100%;
# }
if(knitr::is_html_output()){
glue::glue('<div class="container"> <iframe src="//www.youtube.com/embed/{id}" frameborder="0" allowfullscreen class="video"></iframe> </div><caption class = "caption">{text}</caption>')
}
}
nachweiserfolge_zusammenstellung %>%
select(c(1:4,6)) %>%
kbl(position = "H",
col.names = c("Region","Jahr","n$_{+}$","n$_{Σ}$","Quelle"),
caption = "Zusammenstellung der Resultate verschiedener Spurentunnel-Untersuchungen. n$_{+}$ entspricht der Anzahl Spurentunnel mit Positivnachweisen, n$_{Σ}$ der Anzahl Spurentunnel der entsprechenden Untersuchung."
) %>%
kableExtra::group_rows(index = group_row_indices(nachweiserfolge_zusammenstellung$Typ))
nachweiserfolge_zusammenstellung <- read_delim("input/nachweiserfolge_zusammenstellung.csv", ";")
nachweiserfolge_zusammenstellung <- nachweiserfolge_zusammenstellung %>%
arrange(erfolgskontrolle,Jahr) %>%
mutate(
Typ = ifelse(erfolgskontrolle,"Erfolgskontrolle","Sonstige Studie")
)
nachweiserfolge_zusammenstellung %>%
select(c(1:4,6)) %>%
kbl(position = "H",
col.names = c("Region","Jahr","n$_{+}$","n$_{Σ}$","Quelle"),
caption = "Zusammenstellung der Resultate verschiedener Spurentunnel-Untersuchungen. n$_{+}$ entspricht der Anzahl Spurentunnel mit Positivnachweisen, n$_{Σ}$ der Anzahl Spurentunnel der entsprechenden Untersuchung."
) %>%
kableExtra::group_rows(index = group_row_indices(nachweiserfolge_zusammenstellung$Typ))
nachweiserfolge_zusammenstellung %>%
select(c(1:4,6)) %>%
kbl(position = "h!",
col.names = c("Region","Jahr","npos","ntot","Quelle"),
caption = "Zusammenstellung der Resultate verschiedener Spurentunnel-Untersuchungen. npos entspricht der Anzahl Spurentunnel mit Positivnachweisen, ntot der Anzahl Spurentunnel der entsprechenden Untersuchung."
) %>%
kableExtra::group_rows(index = group_row_indices(nachweiserfolge_zusammenstellung$Typ))
spurenpapiere_systematisch2
spurenpapiere_systematisch
spurenpapiere_systematisch
run_full = FALSE
get_remote = FALSE
if(!run_full){
if(get_remote){
warning("if run_full is set to FALSE, get remote set to FALSE automaically")
get_remote <- FALSE
}
}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
require(kableExtra)
require(dplyr)
require(readr)
require(tidyr)
require(stringr)
require(ggplot2)
require(forcats)
require(lubridate)
require(glue)
group_row_indices <- function(col, prefix = "", suffix = "", sep = ""){
setNames(rle(col)[[1]],paste(prefix,rle(col)[[2]],suffix,sep = sep))
}
youtube <- function(id, text = ""){
require(knitr)
require(glue)
# Careful, you must set the css accordingly (.container and .video)
# https://www.h3xed.com/web-development/how-to-make-a-responsive-100-width-youtube-iframe-embed
# .container {
#     position: relative;
#     width: 100%;
#     height: 0;
#     padding-bottom: 56.25%;
#  }
# .video {
#     position: absolute;
#     top: 0;
#     left: 0;
#     width: 100%;
#     height: 100%;
# }
if(knitr::is_html_output()){
glue::glue('<div class="container"> <iframe src="//www.youtube.com/embed/{id}" frameborder="0" allowfullscreen class="video"></iframe> </div><caption class = "caption">{text}</caption>')
}
}
if(run_full){
require(sf)
require(readxl)
require(tidyr)
require(purrr)
require(ggplot2)
require(forcats)
require(ggwaffle)
require(cowplot)
}
if(get_remote){
require(RPostgres)
conn = DBI::dbConnect(
RPostgres::Postgres(),
host = "svma-s-01348.zhaw.ch",
dbname = "wieselundco",
user = rstudioapi::askForPassword("Database user"),
password = rstudioapi::askForPassword("Database password")
)
if(!DBI::dbIsValid(conn)){
stop("Databaseconnection could not be established")
} else{
############################################################################
## Run this part only if database connection can be established ############
############################################################################
## Beobachtungsmeldungen ###################################################
beobachtungsmeldungen <- read_sf(conn,
query = "SELECT datum, name,name_genauigkeit_datum, name_sichtungsart,name_lagegenauigkeit, status,erfassungsdatum, geom  FROM wico.beobachtungsmeldungen_joined",
crs = 2056)
st_write(beobachtungsmeldungen, "input_sensitive/beobachtungsmeldungen.gpkg",append = FALSE)
## Strukturen ##############################################################
strukturen_alle <- DBI::dbGetQuery(conn, "SELECT * FROM wico.strukturen WHERE datum IS NOT NULL and x IS NOT NULL") %>%
st_as_sf(coords = c("x","y"), crs = 2056)
st_write(strukturen_alle, "input_sensitive/strukturen_alle.gpkg", append = FALSE)
}
}
if(run_full){
beobachtungsmeldungen <- read_sf("input_sensitive/beobachtungsmeldungen.gpkg")
strukturen_alle <- read_sf("input_sensitive/strukturen_alle.gpkg")
## Bezirksgrenze Horgen ######################################################
horgen <- read_sf("input/bezirksgrenze_horgen.gpkg")
## Wirkungskontrolle Informell ##############################################
sheetpath <- "input_sensitive/Wirkungskontrolle_informell_2019-11-09.xlsx"
sheets <- excel_sheets(sheetpath)
sheets <- sheets[!str_detect(sheets, "MASTER|blanko")]
nachweise_spontan <- sheets %>%
map_dfr(function(x){
sheet_i <- read_xlsx(sheetpath, x) %>%
dplyr::select(1:16) %>%
mutate(
Struktur = x,
Jahr = as.integer(Jahr)
) %>%
fill(Jahr)
sheet_fil <- sheet_i %>%
filter(Ctrl != 0, Jahr != "Summe", Jahr != "Anz Ctrl")
sheet_fil
})
date_from_week <- function(year, week, weekday = 1){
require(ISOweek)
w <- paste0(year, "-W", sprintf("%02d", week), "-", weekday)
ISOweek2date(w)
}
nachweise_spontan <- nachweise_spontan %>%
filter(!is.na(KW)) %>%
mutate(date = date_from_week(Jahr,KW))
write_csv(nachweise_spontan, "input_sensitive/wirkungskontrolle_informell_cleand.csv")
## Beobachtete Strukturen (Formell) ##########################################
asthaufen_monitoring <- read_csv("input_sensitive/Standorte_Monitoring_Asthaufen_2019-2020.csv") %>%
transmute(struktur_id = spurentunnel_nummer, monitoring = TRUE)
winterquartier_monitoring <- read_csv("input_sensitive/winterquartiere.csv") %>%
transmute(struktur_id, monitoring = TRUE)
monitoring <- rbind(asthaufen_monitoring, winterquartier_monitoring)
strukturen_alle <- strukturen_alle %>%
full_join(monitoring, by = "struktur_id") %>%
mutate(monitoring = !is.na(monitoring)) %>%
arrange((monitoring))
## Farben ####################################################################
janein_cols <- c("cornflowerblue","coral3") %>%
set_names(c("ja","nein"))
tierart_farben <- RColorBrewer::brewer.pal(6, "Set2") %>%
magrittr::set_names(c("Hermelin","Mauswiesel","Iltis","Baummarder","Steinmarder","andere Arten"))
## Erhebung Formell #########################################################
sheets <- c("Phase_1_2019", "Phase_2_2020")
spurenpapiere_systematisch <- map_dfr(sheets, function(sheet_i){
spurenpapiere_systematisch <-read_xlsx("input//Rohdaten_Erhebung_2019_2020.xlsx",sheet = sheet_i,  skip = 0) %>%
as_tibble()
periode_int <- as.character(spurenpapiere_systematisch[1,])[!is.na(as.integer(spurenpapiere_systematisch[1,]))]
periode_dat <- as.character(spurenpapiere_systematisch[2,])[!is.na(as.integer(spurenpapiere_systematisch[1,]))]
perioden <- tibble(periode_int = periode_int, periode_dat = periode_dat) %>%
separate(periode_dat, c("von","bis")," - ") %>%
mutate_at(2:3,~as.Date(.,format = "%d.%m.%Y"))
spurenpapiere_systematisch <- as.data.frame(spurenpapiere_systematisch)
spurenpapiere_systematisch[1,] <- zoo::na.locf(as.character(spurenpapiere_systematisch[1,]))
spurenpapiere_systematisch <- as_tibble(spurenpapiere_systematisch)
spurenpapiere_systematisch <- spurenpapiere_systematisch[,which(str_detect(as.character(as.vector(spurenpapiere_systematisch[3,])),"Struktur ID|Hermelin|Mauswiesel|Iltis|Mäuse|Steinmarder|Siebenschläfer|Hauskatze|Frosch|Igel|Vogel|Eichhörnchen|Fuchs|Dachs|unbekannt"))]
# |Ratte|||
cnames <- paste(spurenpapiere_systematisch[1,],spurenpapiere_systematisch[3,],sep = "_")
cnames[1] <- "struktur_id"
colnames(spurenpapiere_systematisch) <- cnames
spurenpapiere_systematisch <- tail(spurenpapiere_systematisch,-3) %>%
mutate(struktur_id = as.integer(struktur_id))
spurenpapiere_systematisch <- spurenpapiere_systematisch %>%
pivot_longer(-1,names_to = c("Periode","tierart"),names_sep = "_",values_to = "Detektion") %>%
mutate(Detektion = !is.na(Detektion)) %>%
rename(kontrollperiode = Periode) %>%
left_join(perioden, by = c("kontrollperiode" = "periode_int")) %>%
mutate(phase = sheet_i)
}) %>%
mutate(
phase = factor(phase,levels = sheets,labels = c("Herbst '19","Frühling '20")),
zielart = str_detect(tierart,"Iltis|Hermelin|Mauswiesel")
)
write_csv(spurenpapiere_systematisch, "input/spurenpapiere_systematisch.csv")
} else{
nachweise_spontan <- read_csv("input_sensitive/wirkungskontrolle_informell_cleand.csv")
spurenpapiere_systematisch <- read_csv("input/spurenpapiere_systematisch.csv")
}
## Erhebungswochen ###########################################################
erhebungswochen <- tribble(
~von, ~bis,
"26.08.2019", "05.09.2019",
"05.09.2019", "17.09.2019",
"17.09.2019", "25.09.2019",
"25.09.2019", "07.10.2019",
"01.04.2020", "09.04.2020",
"09.04.2020", "16.04.2020",
"16.04.2020", "23.04.2020",
"23.04.2020", "01.05.2020",
"01.05.2020", "09.05.2020",
"09.05.2020", "18.05.2020"
) %>%
mutate_all(~as.Date(., format = "%d.%m.%Y")) %>%
mutate(
Phase = ifelse(year(von) == 2019,"Herbst 2019","Frühling 2020"),
Phase = fct_rev(Phase)
)
spurenpapiere_systematisch
if(run_full){
nachweise_spontan %>%
filter(Jahr < 2020) %>%
mutate(Struktur = as.integer(factor(Struktur))) %>%
transmute(Struktur, Jahr = as.integer(Jahr),KW, kontrolle = TRUE) %>%
complete(nesting(Struktur),Jahr = 2014:2019,KW = 1:52,fill = list(kontrolle = FALSE)) %>%
ggplot(aes(KW,Struktur,fill = kontrolle)) +
geom_tile(colour = "white",lwd = 0.3) +
facet_wrap(~Jahr, strip.position = "right",ncol = 3) +
scale_fill_manual(breaks = c(FALSE,TRUE),labels = c("nicht vorhanden","vorhanden"),values = c("#828282","#EECF4C")) +
coord_equal(expand = FALSE) +
labs(x = "Kalenderwoche",y = "Struktur Nummer", fill = "Spurenpapier") +
theme(legend.position = "bottom",panel.grid.minor = element_blank(),panel.background = element_blank(),axis.ticks = element_blank(),strip.background = element_rect(fill = "#F0F0F0"))
ggsave("images/wirkungskontrolle_spontan_effort.png",height = 9,width = 17,units = "cm",scale = 1.2)
} else{
}
