theme(legend.position = "bottom",panel.grid.minor = element_blank(),panel.background = element_blank(),axis.ticks = element_blank(),strip.background = element_rect(fill = "#F0F0F0")) #,axis.text.y = element_text(size = 7)
nachweise_spontan %>%
filter(Jahr < 2020) %>%
mutate(Struktur = as.integer(factor(Struktur))) %>%
transmute(Struktur, Jahr = as.integer(Jahr),KW, kontrolle = TRUE) %>%
complete(nesting(Struktur),Jahr = 2014:2019,KW = 1:52,fill = list(kontrolle = FALSE)) %>%
ggplot(aes(KW,Struktur,fill = kontrolle)) +
geom_tile(colour = "white",lwd = 0.3)
nachweise_spontan %>%
filter(Jahr < 2020) %>%
mutate(Struktur = as.integer(factor(Struktur))) %>%
transmute(Struktur, Jahr = as.integer(Jahr),KW, kontrolle = TRUE) %>%
complete(nesting(Struktur),Jahr = 2014:2019,KW = 1:52,fill = list(kontrolle = FALSE))
nachweise_spontan %>%
filter(Jahr < 2020) %>%
mutate(Struktur = as.integer(factor(Struktur))) %>%
transmute(Struktur, Jahr = as.integer(Jahr),KW, kontrolle = TRUE) %>%
complete(nesting(Struktur),Jahr = 2014:2019,KW = 1:52,fill = list(kontrolle = FALSE)) %>%
ggplot(aes(KW,Struktur,fill = kontrolle)) +
geom_tile(colour = "white",lwd = 0.3)
X11()
nachweise_spontan %>%
filter(Jahr < 2020) %>%
mutate(Struktur = as.integer(factor(Struktur))) %>%
transmute(Struktur, Jahr = as.integer(Jahr),KW, kontrolle = TRUE) %>%
complete(nesting(Struktur),Jahr = 2014:2019,KW = 1:52,fill = list(kontrolle = FALSE)) %>%
ggplot(aes(KW,Struktur,fill = kontrolle)) +
geom_tile(colour = "white",lwd = 0.3) +
facet_wrap(~Jahr, strip.position = "right",ncol = 3) +
scale_fill_manual(breaks = c(FALSE,TRUE),labels = c("nicht vorhanden","vorhanden"),values = c("#828282","#EECF4C")) +
coord_equal(expand = FALSE) +
# scale_x_continuous(sec.axis = sec_axis(trans = ~.,breaks = quartalsbeginn[2:4],labels = c("April","Juli","Oktober"))) +
# scale_x_continuous(sec.axis = sec_axis(trans = ~.,breaks = quartalsmitte,labels = c("Q1","Q2","Q3","Q4"))) +
labs(x = "Kalenderwoche",y = "Struktur Nummer", fill = "Spurenpapier") +
theme(legend.position = "bottom",panel.grid.minor = element_blank(),panel.background = element_blank(),axis.ticks = element_blank(),strip.background = element_rect(fill = "#F0F0F0"))
nachweise_spontan %>%
filter(Jahr < 2020) %>%
mutate(Struktur = as.integer(factor(Struktur))) %>%
transmute(Struktur, Jahr = as.integer(Jahr),KW, kontrolle = TRUE) %>%
complete(nesting(Struktur),Jahr = 2014:2019,KW = 1:52,fill = list(kontrolle = FALSE)) %>%
ggplot(aes(KW,Struktur,fill = kontrolle)) +
geom_tile(colour = "white",lwd = 0.3)
nachweise_spontan %>%
filter(Jahr < 2020) %>%
mutate(Struktur = as.integer(factor(Struktur))) %>%
transmute(Struktur, Jahr = as.integer(Jahr),KW, kontrolle = TRUE) %>%
complete(nesting(Struktur),Jahr = 2014:2019,KW = 1:52,fill = list(kontrolle = FALSE))
nachweise_spontan %>%
filter(Jahr < 2020) %>%
mutate(Struktur = as.integer(factor(Struktur))) %>%
transmute(Struktur, Jahr = as.integer(Jahr),KW, kontrolle = TRUE) %>%
complete(nesting(Struktur),Jahr = 2014:2019,KW = 1:52,fill = list(kontrolle = FALSE)) %>%
ggplot(aes(KW,Struktur,fill = kontrolle)) +
geom_tile(colour = "white",lwd = 0.3) +
facet_wrap(~Jahr, strip.position = "right",ncol = 3) +
scale_fill_manual(breaks = c(FALSE,TRUE),labels = c("nicht vorhanden","vorhanden"),values = c("#828282","#EECF4C")) +
coord_equal(expand = FALSE) +
# scale_x_continuous(sec.axis = sec_axis(trans = ~.,breaks = quartalsbeginn[2:4],labels = c("April","Juli","Oktober"))) +
# scale_x_continuous(sec.axis = sec_axis(trans = ~.,breaks = quartalsmitte,labels = c("Q1","Q2","Q3","Q4"))) +
labs(x = "Kalenderwoche",y = "Struktur Nummer", fill = "Spurenpapier") +
theme(legend.position = "bottom",panel.grid.minor = element_blank(),panel.background = element_blank(),axis.ticks = element_blank(),strip.background = element_rect(fill = "#F0F0F0"))
nachweise_spontan %>%
mutate(Zielart = Hermelin == 1 | Iltis == 1)  %>%
group_by(Struktur) %>%
summarise(zielart = ifelse(any(Zielart,na.rm = TRUE),"ja","nein")) %>%
group_by(zielart) %>%
count()  %>%
ungroup() %>%
mutate(
zielart = fct_rev(zielart),
pos = (lag(n,default = 0)+n)/2,
perc = n/sum(n)
) %>%
ggplot(aes(n, "", fill = zielart)) +
geom_col() +
geom_text(aes(x = pos, label = paste0(n, " (",round(perc*100,0),"%)")),position = "stack") +
scale_fill_discrete(type = janein_cols) +
labs(fill = "Zielart detektiert", x = "", y = "") +
guides(fill = guide_legend(reverse = TRUE)) +
theme_light() +
theme(legend.position = "bottom",axis.ticks.y = element_blank())
require(forcats)
nachweise_spontan %>%
mutate(Zielart = Hermelin == 1 | Iltis == 1)  %>%
group_by(Struktur) %>%
summarise(zielart = ifelse(any(Zielart,na.rm = TRUE),"ja","nein")) %>%
group_by(zielart) %>%
count()  %>%
ungroup() %>%
mutate(
zielart = fct_rev(zielart),
pos = (lag(n,default = 0)+n)/2,
perc = n/sum(n)
) %>%
ggplot(aes(n, "", fill = zielart)) +
geom_col() +
geom_text(aes(x = pos, label = paste0(n, " (",round(perc*100,0),"%)")),position = "stack") +
scale_fill_discrete(type = janein_cols) +
labs(fill = "Zielart detektiert", x = "", y = "") +
guides(fill = guide_legend(reverse = TRUE)) +
theme_light() +
theme(legend.position = "bottom",axis.ticks.y = element_blank())
janein_cols <- c("cornflowerblue","coral3") %>%
set_names(c("ja","nein"))
nachweise_spontan %>%
mutate(Zielart = Hermelin == 1 | Iltis == 1)  %>%
group_by(Struktur) %>%
summarise(zielart = ifelse(any(Zielart,na.rm = TRUE),"ja","nein")) %>%
group_by(zielart) %>%
count()  %>%
ungroup() %>%
mutate(
zielart = fct_rev(zielart),
pos = (lag(n,default = 0)+n)/2,
perc = n/sum(n)
) %>%
ggplot(aes(n, "", fill = zielart)) +
geom_col() +
geom_text(aes(x = pos, label = paste0(n, " (",round(perc*100,0),"%)")),position = "stack") +
scale_fill_discrete(type = janein_cols) +
labs(fill = "Zielart detektiert", x = "", y = "") +
guides(fill = guide_legend(reverse = TRUE)) +
theme_light() +
theme(legend.position = "bottom",axis.ticks.y = element_blank())
nachweise_spontan %>%
filter(Jahr < 2020) %>%
mutate(Struktur = as.integer(factor(Struktur))) %>%
transmute(Struktur, Jahr = as.integer(Jahr),KW, kontrolle = TRUE) %>%
complete(nesting(Struktur),Jahr = 2014:2019,KW = 1:52,fill = list(kontrolle = FALSE)) %>%
ggplot(aes(KW,Struktur,fill = kontrolle)) +
geom_tile(colour = "white",lwd = 0.3) +
facet_wrap(~Jahr, strip.position = "right",ncol = 3) +
scale_fill_manual(breaks = c(FALSE,TRUE),labels = c("nicht vorhanden","vorhanden"),values = c("#828282","#EECF4C")) +
coord_equal(expand = FALSE) +
labs(x = "Kalenderwoche",y = "Struktur Nummer", fill = "Spurenpapier") +
theme(legend.position = "bottom",panel.grid.minor = element_blank(),panel.background = element_blank(),axis.ticks = element_blank(),strip.background = element_rect(fill = "#F0F0F0"))
nachweise_spontan %>%
pivot_longer(Mäuse:Ratte,"Art", values_to = "Detektion") %>%
filter(Art %in% c("Hermelin","Iltis","Mauswiesel"),
Detektion == 1) %>%
waffle_iron(aes_d(group = Art),rows = 4) %>%
mutate(group = fct_expand(group,"Mauswiesel")) %>%
ggplot(aes(x,y, fill = group)) +
geom_tile(colour = "white",lwd = 1.2) +
scale_fill_manual(name = "Art",drop = FALSE,values = tierart_farben) +
coord_equal() +
theme_void() +
theme(legend.position = "bottom")
install.packages("waffle")
install.packages("ggwaffle")
devtools::install_github("liamgilbey/ggwaffle")
library(ggwaffle)
nachweise_spontan %>%
pivot_longer(Mäuse:Ratte,"Art", values_to = "Detektion") %>%
filter(Art %in% c("Hermelin","Iltis","Mauswiesel"),
Detektion == 1) %>%
waffle_iron(aes_d(group = Art),rows = 4) %>%
mutate(group = fct_expand(group,"Mauswiesel")) %>%
ggplot(aes(x,y, fill = group)) +
geom_tile(colour = "white",lwd = 1.2) +
scale_fill_manual(name = "Art",drop = FALSE,values = tierart_farben) +
coord_equal() +
theme_void() +
theme(legend.position = "bottom")
tierart_farben <- RColorBrewer::brewer.pal(6, "Set2") %>%
magrittr::set_names(c("Hermelin","Mauswiesel","Iltis","Baummarder","Steinmarder","andere Arten"))
nachweise_spontan %>%
pivot_longer(Mäuse:Ratte,"Art", values_to = "Detektion") %>%
filter(Art %in% c("Hermelin","Iltis","Mauswiesel"),
Detektion == 1) %>%
waffle_iron(aes_d(group = Art),rows = 4) %>%
mutate(group = fct_expand(group,"Mauswiesel")) %>%
ggplot(aes(x,y, fill = group)) +
geom_tile(colour = "white",lwd = 1.2) +
scale_fill_manual(name = "Art",drop = FALSE,values = tierart_farben) +
coord_equal() +
theme_void() +
theme(legend.position = "bottom")
erhebungswochen <- tribble(
~von, ~bis,
"26.08.2019", "05.09.2019",
"05.09.2019", "17.09.2019",
"17.09.2019", "25.09.2019",
"25.09.2019", "07.10.2019",
"01.04.2020", "09.04.2020",
"09.04.2020", "16.04.2020",
"16.04.2020", "23.04.2020",
"23.04.2020", "01.05.2020",
"01.05.2020", "09.05.2020",
"09.05.2020", "18.05.2020"
) %>%
mutate_all(~as.Date(., format = "%d.%m.%Y")) %>%
mutate(
Phase = ifelse(year(von) == 2019,"Herbst 2019","Frühling 2020"),
Phase = fct_rev(Phase)
)
tribble(
~von, ~bis,
"26.08.2019", "05.09.2019",
"05.09.2019", "17.09.2019",
"17.09.2019", "25.09.2019",
"25.09.2019", "07.10.2019",
"01.04.2020", "09.04.2020",
"09.04.2020", "16.04.2020",
"16.04.2020", "23.04.2020",
"23.04.2020", "01.05.2020",
"01.05.2020", "09.05.2020",
"09.05.2020", "18.05.2020"
)
tribble(
~von, ~bis,
"26.08.2019", "05.09.2019",
"05.09.2019", "17.09.2019",
"17.09.2019", "25.09.2019",
"25.09.2019", "07.10.2019",
"01.04.2020", "09.04.2020",
"09.04.2020", "16.04.2020",
"16.04.2020", "23.04.2020",
"23.04.2020", "01.05.2020",
"01.05.2020", "09.05.2020",
"09.05.2020", "18.05.2020"
) %>%
mutate_all(~as.Date(., format = "%d.%m.%Y"))
tribble(
~von, ~bis,
"26.08.2019", "05.09.2019",
"05.09.2019", "17.09.2019",
"17.09.2019", "25.09.2019",
"25.09.2019", "07.10.2019",
"01.04.2020", "09.04.2020",
"09.04.2020", "16.04.2020",
"16.04.2020", "23.04.2020",
"23.04.2020", "01.05.2020",
"01.05.2020", "09.05.2020",
"09.05.2020", "18.05.2020"
) %>%
mutate_all(~as.Date(., format = "%d.%m.%Y")) %>%
mutate(
Phase = ifelse(year(von) == 2019,"Herbst 2019","Frühling 2020"),
Phase = fct_rev(Phase)
)
tribble(
~von, ~bis,
"26.08.2019", "05.09.2019",
"05.09.2019", "17.09.2019",
"17.09.2019", "25.09.2019",
"25.09.2019", "07.10.2019",
"01.04.2020", "09.04.2020",
"09.04.2020", "16.04.2020",
"16.04.2020", "23.04.2020",
"23.04.2020", "01.05.2020",
"01.05.2020", "09.05.2020",
"09.05.2020", "18.05.2020"
) %>%
mutate_all(~as.Date(., format = "%d.%m.%Y"))
require(lubridate)
erhebungswochen <- tribble(
~von, ~bis,
"26.08.2019", "05.09.2019",
"05.09.2019", "17.09.2019",
"17.09.2019", "25.09.2019",
"25.09.2019", "07.10.2019",
"01.04.2020", "09.04.2020",
"09.04.2020", "16.04.2020",
"16.04.2020", "23.04.2020",
"23.04.2020", "01.05.2020",
"01.05.2020", "09.05.2020",
"09.05.2020", "18.05.2020"
) %>%
mutate_all(~as.Date(., format = "%d.%m.%Y")) %>%
mutate(
Phase = ifelse(year(von) == 2019,"Herbst 2019","Frühling 2020"),
Phase = fct_rev(Phase)
)
ggplot(erhebungswochen, aes(x = bis,y = "Kontrollphase")) + geom_segment(lineend = "round",aes(xend = von, yend = "Kontrollphase"), color='#a7a9ac', size = 6)+
geom_point(size = 6) +
geom_point(data = ~slice_head(group_by(., Phase),1,von), aes(x = von),colour = "red", size = 6) +
labs(x = "", y = "") +
scale_x_date(date_breaks = "1 months", date_labels = "%b %y",minor_breaks = NULL) +
theme_light() +
theme(panel.grid.major.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
facet_grid(~Phase, scales = "free_x",space = "free")
erhebungswochen
ggplot(erhebungswochen, aes(x = bis,y = "Kontrollphase")) + geom_segment(lineend = "round",aes(xend = von, yend = "Kontrollphase"), color='#a7a9ac', size = 6)+
geom_point(size = 6)
ggplot(erhebungswochen, aes(x = bis,y = "Kontrollphase")) + geom_segment(lineend = "round",aes(xend = von, yend = "Kontrollphase"), color='#a7a9ac', size = 6)+
geom_point(size = 6) +
geom_point(data = ~slice_head(group_by(., Phase),1,von), aes(x = von),colour = "red", size = 6)
ggplot(erhebungswochen, aes(x = bis,y = "Kontrollphase")) + geom_segment(lineend = "round",aes(xend = von, yend = "Kontrollphase"), color='#a7a9ac', size = 6)+
geom_point(size = 6) +
geom_point(data = ~slice_head(group_by(.x, Phase),1,von), aes(x = von),colour = "red", size = 6)
ggplot(erhebungswochen, aes(x = bis,y = "Kontrollphase")) + geom_segment(lineend = "round",aes(xend = von, yend = "Kontrollphase"), color='#a7a9ac', size = 6)+
geom_point(size = 6)
ggplot(erhebungswochen, aes(x = bis,y = "Kontrollphase")) + geom_segment(lineend = "round",aes(xend = von, yend = "Kontrollphase"), color='#a7a9ac', size = 6)+
geom_point(size = 6) +
# geom_point(data = ~slice_head(group_by(.x, Phase),1,von), aes(x = von),colour = "red", size = 6) +
labs(x = "", y = "") +
scale_x_date(date_breaks = "1 months", date_labels = "%b %y",minor_breaks = NULL) +
theme_light() +
theme(panel.grid.major.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
facet_grid(~Phase, scales = "free_x",space = "free")
ggplot(erhebungswochen, aes(x = bis,y = "Kontrollphase")) + geom_segment(lineend = "round",aes(xend = von, yend = "Kontrollphase"), color='#a7a9ac', size = 6)+
geom_point(size = 6) +
geom_point(data = ~slice_head(group_by(.x, Phase),1,von), aes(x = von),colour = "red", size = 6)
erhebungswochen
ggplot(erhebungswochen, aes(x = bis,y = "Kontrollphase")) +
geom_segment(lineend = "round",aes(xend = von, yend = "Kontrollphase"), color='#a7a9ac', size = 6)+
geom_point(size = 6)
slice_head(group_by(erhebungswochen, Phase),1,von)
group_by(erhebungswochen, Phase)
slice_head(group_by(erhebungswochen, Phase),1,von)
slice_head(group_by(erhebungswochen, Phase),1)
group_by(erhebungswochen, Phase)
?slice_head
slice_head(group_by(erhebungswochen, Phase),n = 1)
ggplot(erhebungswochen, aes(x = bis,y = "Kontrollphase")) +
geom_segment(lineend = "round",aes(xend = von, yend = "Kontrollphase"), color='#a7a9ac', size = 6)+
geom_point(size = 6) +
geom_point(data = ~slice_head(group_by(., Phase),n = 1), aes(x = von),colour = "red", size = 6) +
labs(x = "", y = "") +
scale_x_date(date_breaks = "1 months", date_labels = "%b %y",minor_breaks = NULL) +
theme_light() +
theme(panel.grid.major.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
facet_grid(~Phase, scales = "free_x",space = "free")
sheets <- c("Phase_1_2019", "Phase_2_2020")
spurenpapiere_systematisch <- map_dfr(sheets, function(sheet_i){
spurenpapiere_systematisch <-read_xlsx("input//Rohdaten_Erhebung_2019_2020.xlsx",sheet = sheet_i,  skip = 0) %>%
as_tibble()
periode_int <- as.character(spurenpapiere_systematisch[1,])[!is.na(as.integer(spurenpapiere_systematisch[1,]))]
periode_dat <- as.character(spurenpapiere_systematisch[2,])[!is.na(as.integer(spurenpapiere_systematisch[1,]))]
perioden <- tibble(periode_int = periode_int, periode_dat = periode_dat) %>%
separate(periode_dat, c("von","bis")," - ") %>%
mutate_at(2:3,~as.Date(.,format = "%d.%m.%Y"))
spurenpapiere_systematisch <- as.data.frame(spurenpapiere_systematisch)
spurenpapiere_systematisch[1,] <- zoo::na.locf(as.character(spurenpapiere_systematisch[1,]))
spurenpapiere_systematisch <- as_tibble(spurenpapiere_systematisch)
spurenpapiere_systematisch <- spurenpapiere_systematisch[,which(str_detect(as.character(as.vector(spurenpapiere_systematisch[3,])),"Struktur ID|Hermelin|Mauswiesel|Iltis|Mäuse|Steinmarder|Siebenschläfer|Hauskatze|Frosch|Igel|Vogel|Eichhörnchen|Fuchs|Dachs|unbekannt"))]
# |Ratte|||
cnames <- paste(spurenpapiere_systematisch[1,],spurenpapiere_systematisch[3,],sep = "_")
cnames[1] <- "struktur_id"
colnames(spurenpapiere_systematisch) <- cnames
spurenpapiere_systematisch <- tail(spurenpapiere_systematisch,-3) %>%
mutate(struktur_id = as.integer(struktur_id))
spurenpapiere_systematisch <- spurenpapiere_systematisch %>%
pivot_longer(-1,names_to = c("Periode","tierart"),names_sep = "_",values_to = "Detektion") %>%
mutate(Detektion = !is.na(Detektion)) %>%
rename(kontrollperiode = Periode) %>%
left_join(perioden, by = c("kontrollperiode" = "periode_int")) %>%
mutate(phase = sheet_i)
}) %>%
mutate(
phase = factor(phase,levels = sheets,labels = c("Herbst '19","Frühling '20")),
zielart = str_detect(tierart,"Iltis|Hermelin|Mauswiesel")
)
spurenpapiere_systematisch
spurenpapiere_systematisch %>%
filter(tierart %in% c("Hermelin","Iltis","Mauswiesel"),
Detektion) %>%
waffle_iron(aes_d(group = tierart),rows = 4) %>%
mutate(group = fct_expand(group,"Mauswiesel")) %>%
ggplot(aes(x,y, fill = group)) +
geom_tile(colour = "white",lwd = 1.2) +
scale_fill_manual(name = "Art",drop = FALSE,values = tierart_farben) +
coord_equal() +
theme_void() +
theme(legend.position = "bottom")
require(cowplot)
janein_cols
p1 <- spurenpapiere_systematisch %>%
filter(zielart) %>%
mutate(phase = fct_rev(phase)) %>%
group_by(struktur_id,phase) %>%
summarise(zielart = any(Detektion)) %>%
group_by(phase,zielart) %>%
count() %>%
group_by(phase) %>%
mutate(
zielart = ifelse(zielart,"ja","nein")
) %>%
arrange(phase,zielart) %>%
mutate(
zielart = fct_rev(zielart),
pos = (lag(n,default = 0)+n)/2,
perc = n/sum(n)
) %>%
ggplot(aes(n,phase, fill = zielart)) +
geom_col() +
geom_text(aes(x = pos, label = paste0(n, " (",round(perc*100,0),"%)")),position = "stack") +
scale_fill_discrete(type = janein_cols) +
labs(fill = "Zielart detektiert", x = "", y = "") +
theme_light() +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p2 <- spurenpapiere_systematisch %>%
filter(zielart) %>%
mutate(phase = fct_rev(phase)) %>%
group_by(struktur_id) %>%
summarise(zielart = any(Detektion)) %>%
group_by(zielart) %>%
count() %>%
ungroup() %>%
mutate(
zielart = ifelse(zielart,"ja","nein")
) %>%
arrange(zielart) %>%
mutate(
zielart = fct_rev(zielart),
pos = (lag(n,default = 0)+n)/2,
perc = n/sum(n)
)%>%
ggplot(aes(n,"Beide Jahre", fill = zielart)) +
geom_col() +
geom_text(aes(x = pos, label = paste0(n, " (",round(perc*100,0),"%)")),position = "stack") +
scale_fill_discrete(type = janein_cols) +
labs(fill = "Zielart detektiert", x = "Anzahl Strukturen", y = "") +
guides(fill = guide_legend(reverse = TRUE)) +
theme_light() +
theme(legend.position = "bottom")
p3 <- cowplot::plot_grid(p1, p2, ncol = 1,rel_heights = c(4,4.6),align = "v")
p3
labs(y = "Anzah
)
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr") +
theme_light()
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr") +
theme_light()
beobachtungsmeldungen
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)})
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr")
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr") +
theme_light()
beobachtungsmeldungen %>%
st_drop_geometry() %>%
mutate(year = year(erfassungsdatum))%>%
group_by(year) %>%
count() %>%
ggplot(aes(year, n)) +geom_col() +
scale_x_continuous(breaks = function(x){seq(floor(x[1]),ceiling(x[2]),1)},labels = function(x){paste0("'",x-2000)}) +
labs(y = "Anzahl Meldungen", x = "Erfassungsjahr") +
theme_light()
nachweiserfolg_ref <- read_delim("input/nachweiserfolge_zusammenstellung.csv", ";") %>%
mutate(
Studie = paste(Bezeichnung,Jahr),
nachweiserfolg = tunnel_mit_nachweisen / tunnel_total,
erfolgskontrolle_name = ifelse(erfolgskontrolle,"Erfolgskontrollen","andere Untersuchungen"),
)
vorliegende_studie <- c("Horgen 2019", "Horgen 2020", "Horgen 2014 - 2019")
nachweiserfolg_smry <- nachweiserfolg_ref %>%
group_by(erfolgskontrolle_name) %>%
summarise(
tunnel = median(tunnel_total),
nachweiserfolg_median = median(nachweiserfolg),
nachweiserfolg_q75 = quantile(nachweiserfolg, 0.75),
nachweiserfolg_q25 = quantile(nachweiserfolg, 0.25),
) %>%
mutate(
Studie = "Verteilung"
)
nachweiserfolg_ref2 <- bind_rows(nachweiserfolg_ref, nachweiserfolg_smry) %>%
mutate(
Studie = fct_reorder(Studie,nachweiserfolg),
erfolgskontrolle_name = fct_rev(erfolgskontrolle_name),
Studie = fct_relevel(Studie,"Verteilung",after = 0)
)
nachweiserfolg_ref2%>%
ggplot(aes(nachweiserfolg,Studie, size = tunnel_total)) +
geom_point() +
geom_point(data = ~filter(.,Studie %in% vorliegende_studie),colour = "red") +
geom_point(data = ~filter(.,!Studie %in% vorliegende_studie)) +
geom_pointrange(aes(x = nachweiserfolg_median, xmin = nachweiserfolg_q25, xmax = nachweiserfolg_q75, y = Studie),inherit.aes = FALSE) +
labs(size = "Anzahl Spurentunnel", y = "", x = "Nachweiserfolg") +
scale_x_continuous(labels = scales::percent_format(),limits = c(0,1)) +
# scale_size(limits = c(20,100)) +
# lims(x = c(0,100)) +
theme_light() +
theme(legend.position = "bottom") +
facet_grid(erfolgskontrolle_name~., scales = "free_y",space = "free")
